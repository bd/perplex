#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3.6 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 30 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 55 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1
          0 1730 0 27 3 18 #"#lang typed/racket"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"require"
0 0 23 3 1 #" "
0 0 14 3 9 #"math/base"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 73
(
 #";the smallest unit of language, here, represented as a 1 character s"
 #"tring"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 23 3 1 #" "
0 0 14 3 4 #"Atom"
0 0 23 3 1 #" "
0 0 14 3 6 #"String"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 16 #"define-predicate"
0 0 23 3 1 #" "
0 0 14 3 5 #"Atom?"
0 0 23 3 1 #" "
0 0 14 3 4 #"Atom"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 38 #";after phoneme, lexeme, morpheme, etc."
0 0 23 29 1 #"\n"
0 0 17 3 74
(
 #";a very abstract notion--the name of a member of a type of linguisti"
 #"c unit"
) 0 0 23 29 1 #"\n"
0 0 17 3 36 #";here represented as a racket symbol"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 23 3 1 #" "
0 0 14 3 7 #"EmeType"
0 0 23 3 2 #" ("
0 0 14 3 1 #"U"
0 0 23 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 23 3 1 #" "
0 0 14 3 4 #"Atom"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 16 #"define-predicate"
0 0 23 3 1 #" "
0 0 14 3 8 #"EmeType?"
0 0 23 3 1 #" "
0 0 14 3 7 #"EmeType"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 16 #"define-predicate"
0 0 23 3 1 #" "
0 0 14 3 12 #"ComplexType?"
0 0 23 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 71
(
 #";a grammatically valid sequence of EmeTypes, i.e. \"subject verb obj"
 #"ect\""
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 23 3 1 #" "
0 0 14 3 10 #"Production"
0 0 23 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 23 3 1 #" "
0 0 14 3 7 #"EmeType"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 17 3 84
(
 #";The whole kitten kaboodle, grammatically speaking--our generated la"
 #"nguage's grammar"
) 0 0 23 29 1 #"\n"
0 0 17 3 68
#";constructed as a list of mappings from a type to valid productions "
0 0 23 29 1 #"\n"
0 0 17 3 63
#";the order of the list provides implicit hierarchy, s.t. (first"
0 0 17 3 9 #" Grammar)"
0 0 23 29 1 #"\n"
0 0 17 3 53 #";is composed entirely from the types defined in (rest"
0 0 17 3 9 #" Grammar)"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 23 3 1 #" "
0 0 14 3 7 #"Grammar"
0 0 23 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 23 3 1 #" "
0 0 14 3 10 #"SubGrammar"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 17 3 28 #";a single level of a grammar"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 23 3 1 #" "
0 0 14 3 10 #"SubGrammar"
0 0 23 3 2 #" ("
0 0 14 3 9 #"HashTable"
0 0 23 3 1 #" "
0 0 14 3 7 #"EmeType"
0 0 23 3 3 #"  ("
0 0 14 3 6 #"Listof"
0 0 23 3 1 #" "
0 0 14 3 10 #"Production"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 17 3 63
#";the container for the specific phonemes, words, phrases, etc. "
0 0 23 29 1 #"\n"
0 0 17 3 22 #"; organized by EmeType"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 23 3 1 #" "
0 0 14 3 7 #"Lexicon"
0 0 23 3 2 #" ("
0 0 14 3 9 #"HashTable"
0 0 23 3 1 #" "
0 0 14 3 7 #"EmeType"
0 0 23 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 23 3 1 #" "
0 0 14 3 6 #"String"
0 0 23 3 5 #")))  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 89
(
 #";turns a production into text. That is, given a grammatical outline "
 #"of a unit of language"
) 0 0 23 29 1 #"\n"
0 0 17 3 80
(
 #";it non-deterministically generates a text that conforms to the rule"
 #"s presented."
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 8 #"evaluate"
0 0 23 3 2 #" ("
0 0 14 3 10 #"Production"
0 0 23 3 1 #" "
0 0 14 3 7 #"Grammar"
0 0 23 3 1 #" "
0 0 14 3 7 #"Lexicon"
0 0 23 3 1 #" "
0 0 14 3 2 #"->"
0 0 23 3 1 #" "
0 0 14 3 6 #"String"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 8 #"evaluate"
0 0 23 3 1 #" "
0 0 14 3 10 #"production"
0 0 23 3 1 #" "
0 0 14 3 7 #"grammar"
0 0 23 3 1 #" "
0 0 14 3 7 #"lexicon"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 7 #"letrec:"
0 0 23 3 3 #" (["
0 0 14 3 4 #"eval"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 2 #" ("
0 0 14 3 10 #"Production"
0 0 23 3 1 #" "
0 0 14 3 7 #"Grammar"
0 0 23 3 1 #" "
0 0 14 3 2 #"->"
0 0 23 3 1 #" "
0 0 14 3 6 #"String"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 15 3 3 #"\316\273:"
0 0 23 3 3 #" (["
0 0 14 3 10 #"production"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 10 #"Production"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ["
0 0 14 3 7 #"grammar"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 7 #"Grammar"
0 0 23 3 24 #"])                      "
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 5 #"null?"
0 0 23 3 1 #" "
0 0 14 3 10 #"production"
0 0 23 3 2 #") "
0 0 19 3 2 #"\"\""
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                          [("
0 0 14 3 5 #"Atom?"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 10 #"production"
0 0 23 3 4 #")) ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 10 #"production"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                          [("
0 0 14 3 18 #"lookup-in-lexicon?"
0 0 23 3 1 #" "
0 0 14 3 7 #"lexicon"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 10 #"production"
0 0 23 3 4 #")) ("
0 0 14 3 13 #"string-append"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 82
(
 #"                                                                    "
 #"             ("
) 0 0 14 3 13 #"select-random"
0 0 23 3 2 #" ("
0 0 14 3 17 #"lookup-in-lexicon"
0 0 23 3 1 #" "
0 0 14 3 7 #"lexicon"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 10 #"production"
0 0 23 3 4 #"))) "
0 0 23 29 1 #"\n"
0 0 23 3 82
(
 #"                                                                    "
 #"             ("
) 0 0 14 3 4 #"eval"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 10 #"production"
0 0 23 3 2 #") "
0 0 14 3 7 #"grammar"
0 0 23 3 3 #"))]"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                          ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 23 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 23 3 2 #" ("
0 0 14 3 13 #"select-random"
0 0 23 3 2 #" ("
0 0 14 3 18 #"lookup-productions"
0 0 23 3 1 #" "
0 0 14 3 7 #"grammar"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 10 #"production"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 53 #"                                                     "
0 0 14 3 7 #"grammar"
0 0 23 3 2 #" )"
0 0 23 29 1 #"\n"
0 0 23 3 48 #"                                               ("
0 0 14 3 4 #"eval"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 10 #"production"
0 0 23 3 2 #") "
0 0 14 3 7 #"grammar"
0 0 23 3 7 #"))]))])"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 4 #"eval"
0 0 23 3 1 #" "
0 0 14 3 10 #"production"
0 0 23 3 1 #" "
0 0 14 3 7 #"grammar"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 85
(
 #";rather than evaluate directly, we need to preserve the particulars "
 #"of an evaluation "
) 0 0 23 29 1 #"\n"
0 0 17 3 54 #";so they can be interred in the lexicon for future use"
0 0 23 29 1 #"\n"
0 0 17 3 132
(
 #";the flow would be something like build-grammar -> generate producti"
 #"on->expand-production->inter-production-evaluations->return text"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 23 3 1 #" "
0 0 14 3 9 #"Expansion"
0 0 23 3 2 #" ("
0 0 14 3 3 #"Rec"
0 0 23 3 2 #" ("
0 0 14 3 6 #"Pairof"
0 0 23 3 1 #" "
0 0 14 3 7 #"EmeType"
0 0 23 3 2 #" ("
0 0 14 3 1 #"U"
0 0 23 3 1 #" "
0 0 14 3 10 #"Exapansion"
0 0 23 3 1 #" "
0 0 14 3 7 #"EmeType"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 6 #"expand"
0 0 23 3 2 #" ("
0 0 14 3 7 #"EmeType"
0 0 23 3 1 #" "
0 0 14 3 7 #"Grammar"
0 0 23 3 1 #" "
0 0 14 3 2 #"->"
0 0 23 3 1 #" "
0 0 14 3 9 #"Expansion"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 6 #"expand"
0 0 23 3 1 #" "
0 0 14 3 4 #"type"
0 0 23 3 1 #" "
0 0 14 3 7 #"grammar"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 7 #"letrec:"
0 0 23 3 3 #" (["
0 0 14 3 6 #"expand"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 2 #" ("
0 0 14 3 7 #"EmeType"
0 0 23 3 1 #" "
0 0 14 3 7 #"Grammar"
0 0 23 3 1 #" "
0 0 14 3 2 #"->"
0 0 23 3 1 #" "
0 0 14 3 9 #"Expansion"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 15 3 3 #"\316\273:"
0 0 23 3 3 #" (["
0 0 14 3 3 #"lhs"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 7 #"EmeType"
0 0 23 3 2 #"] "
0 0 17 3 45 #";the so-called left-hand side of a production"
0 0 23 29 1 #"\n"
0 0 23 3 26 #"                         ["
0 0 14 3 7 #"grammar"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 7 #"Grammar"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                         [)"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                        ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 5 #"Atom?"
0 0 23 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 23 3 2 #") "
0 0 14 3 3 #"lhs"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 31 #"                              ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 23 3 2 #" ("
0 0 14 3 3 #"map"
0 0 23 3 3 #"  ("
0 0 14 3 18 #"lookup-productions"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 27 #"GRAMMAR-INITIAL-PROBABILITY"
0 0 23 3 1 #" "
0 0 20 3 3 #".01"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 18 #"GRAMMAR-DECAY-RATE"
0 0 23 3 1 #" "
0 0 20 3 3 #".02"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 23 29 1 #"\n"
0 0 17 3 39 #";constructs a grammar for the language "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 13 #"build-grammar"
0 0 23 3 3 #" (("
0 0 14 3 5 #"Setof"
0 0 23 3 1 #" "
0 0 14 3 4 #"Atom"
0 0 23 3 2 #") "
0 0 14 3 2 #"->"
0 0 23 3 1 #" "
0 0 14 3 7 #"Grammar"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 13 #"build-grammar"
0 0 23 3 1 #" "
0 0 14 3 7 #"atomset"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 7 #"letrec:"
0 0 23 3 3 #" (["
0 0 14 3 12 #"base-grammar"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 10 #"SubGrammar"
0 0 23 3 2 #" ("
0 0 14 3 9 #"bootstrap"
0 0 23 3 1 #" "
0 0 14 3 7 #"atomset"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ["
0 0 14 3 5 #"build"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 2 #" ("
0 0 14 3 7 #"Grammar"
0 0 23 3 1 #" "
0 0 14 3 4 #"Real"
0 0 23 3 1 #" "
0 0 14 3 4 #"Real"
0 0 23 3 1 #" "
0 0 14 3 2 #"->"
0 0 23 3 1 #" "
0 0 14 3 7 #"Grammar"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 15 3 3 #"\316\273:"
0 0 23 3 3 #" (["
0 0 14 3 7 #"grammar"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 7 #"Grammar"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                        ["
0 0 14 3 11 #"probability"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 4 #"Real"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                        ["
0 0 14 3 10 #"decay-rate"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 4 #"Real"
0 0 23 3 2 #"])"
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                     ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 5 #"done?"
0 0 23 3 1 #" "
0 0 14 3 7 #"grammar"
0 0 23 3 1 #" "
0 0 14 3 11 #"probability"
0 0 23 3 2 #") "
0 0 14 3 7 #"grammar"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 5 #"build"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 14 #"extend-grammar"
0 0 23 3 2 #" ("
0 0 14 3 9 #"hash-keys"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 7 #"grammar"
0 0 23 3 4 #"))) "
0 0 14 3 7 #"grammar"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 41 #"                                        ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 11 #"probability"
0 0 23 3 1 #" "
0 0 14 3 10 #"decay-rate"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 40 #"                                        "
0 0 14 3 10 #"decay-rate"
0 0 23 3 6 #")]))])"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 5 #"build"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 12 #"base-grammar"
0 0 23 3 2 #") "
0 0 14 3 27 #"GRAMMAR-INITIAL-PROBABILITY"
0 0 23 3 1 #" "
0 0 14 3 18 #"GRAMMAR-DECAY-RATE"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 84
(
 #";assigns the character set to arbitrary types, as the starting point"
 #" for the grammar"
) 0 0 23 29 1 #"\n"
0 0 17 3 65
#";this is the foundation of the tower to babble we're constructing"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 9 #"bootstrap"
0 0 23 3 3 #" (("
0 0 14 3 5 #"Setof"
0 0 23 3 1 #" "
0 0 14 3 4 #"Atom"
0 0 23 3 2 #") "
0 0 14 3 2 #"->"
0 0 23 3 1 #" "
0 0 14 3 10 #"SubGrammar"
0 0 23 3 3 #" ))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"bootstrap"
0 0 23 3 1 #" "
0 0 14 3 7 #"atomset"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 7 #"letrec:"
0 0 23 3 3 #" (["
0 0 14 3 5 #"types"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 23 3 1 #" "
0 0 14 3 7 #"EmeType"
0 0 23 3 3 #") ("
0 0 14 3 24 #"make-random-emetype-list"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ["
0 0 14 3 5 #"atoms"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 23 3 1 #" "
0 0 14 3 4 #"Atom"
0 0 23 3 3 #") ("
0 0 14 3 9 #"set->list"
0 0 23 3 1 #" "
0 0 14 3 7 #"atomset"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ["
0 0 14 3 12 #"assign-atoms"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 3 #" (("
0 0 14 3 6 #"Listof"
0 0 23 3 1 #" "
0 0 14 3 7 #"EmeType"
0 0 23 3 3 #") ("
0 0 14 3 6 #"Listof"
0 0 23 3 1 #" "
0 0 14 3 4 #"Atom"
0 0 23 3 2 #") "
0 0 14 3 10 #"SubGrammar"
0 0 23 3 1 #" "
0 0 14 3 2 #"->"
0 0 23 3 1 #" "
0 0 14 3 10 #"SubGrammar"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                          ("
0 0 15 3 2 #"\316\273"
0 0 23 3 2 #" ("
0 0 14 3 5 #"types"
0 0 23 3 1 #" "
0 0 14 3 5 #"atoms"
0 0 23 3 1 #" "
0 0 14 3 12 #"base-grammar"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 29 #"                            ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 5 #"null?"
0 0 23 3 1 #" "
0 0 14 3 5 #"atoms"
0 0 23 3 2 #") "
0 0 14 3 12 #"base-grammar"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 34 #"                                  "
0 0 17 3 103
(
 #";TODO | allow a few atoms to appear as valid productions of more tha"
 #"n one base type, i.e. \"sometimes y\""
) 0 0 23 29 1 #"\n"
0 0 23 3 35 #"                                  ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 12 #"assign-atoms"
0 0 23 3 1 #" "
0 0 14 3 5 #"types"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 5 #"atoms"
0 0 23 3 3 #") ("
0 0 14 3 6 #"update"
0 0 23 3 1 #" "
0 0 14 3 12 #"base-grammar"
0 0 23 3 2 #" ("
0 0 14 3 13 #"select-random"
0 0 23 3 1 #" "
0 0 14 3 5 #"types"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 5 #"atoms"
0 0 23 3 9 #"))))]))])"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 12 #"assign-atoms"
0 0 23 3 1 #" "
0 0 14 3 5 #"types"
0 0 23 3 2 #"  "
0 0 14 3 5 #"atoms"
0 0 23 3 2 #" ("
0 0 14 3 19 #"make-immutable-hash"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 6 #"()))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 63
#";arbitrarily creates productions from the typeset argument and "
0 0 23 29 1 #"\n"
0 0 17 3 76
(
 #";and assigns  them to a randomly generated list of new higher-order "
 #"EmeTypes"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 14 #"extend-grammar"
0 0 23 3 3 #" (("
0 0 14 3 6 #"Listof"
0 0 23 3 1 #" "
0 0 14 3 7 #"EmeType"
0 0 23 3 2 #") "
0 0 14 3 2 #"->"
0 0 23 3 1 #" "
0 0 14 3 10 #"SubGrammar"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 14 #"extend-grammar"
0 0 23 3 1 #" "
0 0 14 3 7 #"typeset"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 7 #"letrec:"
0 0 23 3 3 #" (["
0 0 14 3 9 #"new-types"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 23 3 1 #" "
0 0 14 3 7 #"EmeType"
0 0 23 3 3 #") ("
0 0 14 3 12 #"make-random-"
0 0 14 3 3 #"eme"
0 0 14 3 9 #"type-list"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 1 #" "
0 0 20 3 2 #"60"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ["
0 0 14 3 15 #"composing-types"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 23 3 1 #" "
0 0 14 3 7 #"EmeType"
0 0 23 3 2 #") "
0 0 14 3 7 #"typeset"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ["
0 0 14 3 19 #"compose-productions"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 4 #" ( ("
0 0 14 3 6 #"Listof"
0 0 23 3 1 #" "
0 0 14 3 7 #"EmeType"
0 0 23 3 2 #") "
0 0 14 3 10 #"SubGrammar"
0 0 23 3 1 #" "
0 0 14 3 2 #"->"
0 0 23 3 1 #" "
0 0 14 3 10 #"SubGrammar"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 34 #"                                 ("
0 0 15 3 3 #"\316\273:"
0 0 23 3 3 #" (["
0 0 14 3 5 #"types"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 23 3 1 #" "
0 0 14 3 7 #"EmeType"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 39 #"                                      ["
0 0 14 3 7 #"grammar"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 10 #"SubGrammar"
0 0 23 3 2 #"])"
0 0 23 29 1 #"\n"
0 0 23 3 36 #"                                   ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 5 #"null?"
0 0 23 3 1 #" "
0 0 14 3 5 #"types"
0 0 23 3 2 #") "
0 0 14 3 7 #"grammar"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 42 #"                                         ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 19 #"compose-productions"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 49 #"                                                ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 5 #"types"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 49 #"                                                ("
0 0 14 3 8 #"hash-set"
0 0 23 3 1 #" "
0 0 14 3 7 #"grammar"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 5 #"types"
0 0 23 3 3 #") ("
0 0 14 3 21 #"random-production-set"
0 0 23 3 1 #" "
0 0 14 3 15 #"composing-types"
0 0 23 3 8 #")))]))])"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 19 #"compose-productions"
0 0 23 3 1 #" "
0 0 14 3 9 #"new-types"
0 0 23 3 2 #" ("
0 0 14 3 19 #"make-immutable-hash"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 6 #"()))))"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 22 #"PRODUCTION-PROBABILITY"
0 0 23 3 1 #" "
0 0 20 3 4 #".005"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 16 #"PRODUCTION-DECAY"
0 0 23 3 1 #" "
0 0 20 3 3 #".03"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 81
(
 #";constructs a set of Productions (though returned as a list type for"
 #" convenience)"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 21 #"random-production-set"
0 0 23 3 3 #" (("
0 0 14 3 6 #"Listof"
0 0 23 3 1 #" "
0 0 14 3 7 #"EmeType"
0 0 23 3 2 #") "
0 0 14 3 2 #"->"
0 0 23 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 23 3 1 #" "
0 0 14 3 10 #"Production"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 21 #"random-production-set"
0 0 23 3 1 #" "
0 0 14 3 15 #"composing-types"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 7 #"letrec:"
0 0 23 3 3 #" (["
0 0 14 3 16 #"make-productions"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 3 #" (("
0 0 14 3 5 #"Setof"
0 0 23 3 1 #" "
0 0 14 3 10 #"Production"
0 0 23 3 2 #") "
0 0 14 3 4 #"Real"
0 0 23 3 1 #" "
0 0 14 3 4 #"Real"
0 0 23 3 1 #" "
0 0 14 3 2 #"->"
0 0 23 3 2 #" ("
0 0 14 3 5 #"Setof"
0 0 23 3 1 #" "
0 0 14 3 10 #"Production"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 31 #"                              ("
0 0 15 3 3 #"\316\273:"
0 0 23 3 3 #" (["
0 0 14 3 11 #"productions"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 2 #" ("
0 0 14 3 5 #"Setof"
0 0 23 3 1 #" "
0 0 14 3 10 #"Production"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 36 #"                                   ["
0 0 14 3 11 #"probability"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 4 #"Real"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 36 #"                                   ["
0 0 14 3 10 #"decay-rate"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 4 #"Real"
0 0 23 3 2 #"])"
0 0 23 29 1 #"\n"
0 0 23 3 33 #"                                ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 5 #"done?"
0 0 23 3 2 #" ("
0 0 14 3 9 #"set->list"
0 0 23 3 1 #" "
0 0 14 3 11 #"productions"
0 0 23 3 2 #") "
0 0 14 3 11 #"probability"
0 0 23 3 2 #") "
0 0 14 3 11 #"productions"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 39 #"                                      ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 16 #"make-productions"
0 0 23 29 1 #"\n"
0 0 23 3 46 #"                                             ("
0 0 14 3 7 #"set-add"
0 0 23 3 1 #" "
0 0 14 3 11 #"productions"
0 0 23 3 2 #" ("
0 0 14 3 17 #"random-production"
0 0 23 3 2 #" ("
0 0 14 3 9 #"list->set"
0 0 23 3 1 #" "
0 0 14 3 15 #"composing-types"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 46 #"                                             ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 11 #"probability"
0 0 23 3 1 #" "
0 0 14 3 10 #"decay-rate"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 45 #"                                             "
0 0 14 3 10 #"decay-rate"
0 0 23 3 6 #")]))])"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 9 #"set->list"
0 0 23 3 2 #" ("
0 0 14 3 16 #"make-productions"
0 0 23 3 2 #" ("
0 0 14 3 3 #"set"
0 0 23 3 3 #" ) "
0 0 14 3 22 #"PRODUCTION-PROBABILITY"
0 0 23 3 1 #" "
0 0 14 3 16 #"PRODUCTION-DECAY"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 33 #"PRODUCTION-COMPLETION-PROBABILITY"
0 0 23 3 1 #" "
0 0 20 3 4 #".005"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 27 #"PRODUCTION-COMPLETION-DECAY"
0 0 23 3 1 #" "
0 0 20 3 3 #".02"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 51 #";constructs a random Production from a set of types"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 17 #"random-production"
0 0 23 3 3 #" (("
0 0 14 3 5 #"Setof"
0 0 23 3 1 #" "
0 0 14 3 7 #"EmeType"
0 0 23 3 2 #") "
0 0 14 3 2 #"->"
0 0 23 3 1 #" "
0 0 14 3 10 #"Production"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 17 #"random-production"
0 0 23 3 1 #" "
0 0 14 3 15 #"composing-types"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 7 #"letrec:"
0 0 23 3 3 #" (["
0 0 14 3 5 #"types"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 23 3 1 #" "
0 0 14 3 7 #"EmeType"
0 0 23 3 3 #") ("
0 0 14 3 9 #"set->list"
0 0 23 3 1 #" "
0 0 14 3 15 #"composing-types"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ["
0 0 14 3 12 #"grammar-rule"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 2 #" ("
0 0 14 3 10 #"Production"
0 0 23 3 1 #" "
0 0 14 3 4 #"Real"
0 0 23 3 1 #" "
0 0 14 3 4 #"Real"
0 0 23 3 1 #" "
0 0 14 3 2 #"->"
0 0 23 3 1 #" "
0 0 14 3 10 #"Production"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                          ("
0 0 15 3 3 #"\316\273:"
0 0 23 3 3 #" (["
0 0 14 3 10 #"production"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 10 #"Production"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 32 #"                               ["
0 0 14 3 11 #"probability"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 4 #"Real"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 32 #"                               ["
0 0 14 3 10 #"decay-rate"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 4 #"Real"
0 0 23 3 2 #"])"
0 0 23 29 1 #"\n"
0 0 23 3 29 #"                            ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 5 #"done?"
0 0 23 3 1 #" "
0 0 14 3 10 #"production"
0 0 23 3 1 #" "
0 0 14 3 11 #"probability"
0 0 23 3 2 #") "
0 0 14 3 10 #"production"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 35 #"                                  ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 12 #"grammar-rule"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 42 #"                                         ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 13 #"select-random"
0 0 23 3 1 #" "
0 0 14 3 5 #"types"
0 0 23 3 2 #") "
0 0 14 3 10 #"production"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 42 #"                                         ("
0 0 14 3 1 #"+"
0 0 23 3 2 #"  "
0 0 14 3 11 #"probability"
0 0 23 3 1 #" "
0 0 14 3 10 #"decay-rate"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 41 #"                                         "
0 0 14 3 10 #"decay-rate"
0 0 23 3 6 #")]))])"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 12 #"grammar-rule"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 3 #"() "
0 0 14 3 33 #"PRODUCTION-COMPLETION-PROBABILITY"
0 0 23 3 1 #" "
0 0 14 3 27 #"PRODUCTION-COMPLETION-DECAY"
0 0 23 3 4 #"))) "
0 0 17 3 62
#";TODO extract decay/probability to constants or dynamic lookup"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 120
(
 #";randomly decides if a list (i.e. Production, list of Production, et"
 #"c. is to be considered complete, given a probability"
) 0 0 23 29 1 #"\n"
0 0 17 3 88
(
 #";thus, the caller may generate a decay function s.t. the likelihood "
 #"of the production's "
) 0 0 23 29 1 #"\n"
0 0 17 3 55 #";being extended is diminished with each successive call"
0 0 23 29 1 #"\n"
0 0 17 3 34 #";this function is meant to put off"
0 0 17 3 68
#" the determination of the range of variability until the last moment"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 5 #"done?"
0 0 23 3 2 #" ("
0 0 14 3 3 #"All"
0 0 23 3 2 #" ("
0 0 14 3 1 #"T"
0 0 23 3 3 #") ("
0 0 14 3 6 #"Listof"
0 0 23 3 1 #" "
0 0 14 3 1 #"T"
0 0 23 3 2 #") "
0 0 14 3 4 #"Real"
0 0 23 3 1 #" "
0 0 14 3 2 #"->"
0 0 23 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 5 #"done?"
0 0 23 3 1 #" "
0 0 14 3 10 #"production"
0 0 23 3 1 #" "
0 0 14 3 11 #"probability"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 5 #"null?"
0 0 23 3 1 #" "
0 0 14 3 10 #"production"
0 0 23 3 2 #") "
0 0 20 3 2 #"#f"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 23 3 3 #"  ("
0 0 14 3 1 #"<"
0 0 23 3 2 #" ("
0 0 14 3 6 #"random"
0 0 23 3 2 #") "
0 0 14 3 11 #"probability"
0 0 23 3 4 #")]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 70
(
 #";the character set [here: provided by the IBM Selectric II typewrite"
 #"r]"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 15 #"SELECTRIC-CHARS"
0 0 23 3 2 #" ("
0 0 14 3 3 #"set"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"q\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"w\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"e\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"r\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"t\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"y\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"u\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"i\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"o\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"p\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"s\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"d\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"f\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"g\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"h\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"j\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"k\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"l\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"z\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"x\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"c\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"v\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"b\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"n\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"m\""
0 0 23 3 3 #" ))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 54 #";utility to find the productions for the given EmeType"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 18 #"lookup-productions"
0 0 23 3 2 #" ("
0 0 14 3 7 #"Grammar"
0 0 23 3 1 #" "
0 0 14 3 7 #"EmeType"
0 0 23 3 1 #" "
0 0 14 3 2 #"->"
0 0 23 3 3 #"  ("
0 0 14 3 6 #"Listof"
0 0 23 3 1 #" "
0 0 14 3 10 #"Production"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 18 #"lookup-productions"
0 0 23 3 1 #" "
0 0 14 3 7 #"grammar"
0 0 23 3 1 #" "
0 0 14 3 4 #"type"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 5 #"Atom?"
0 0 23 3 1 #" "
0 0 14 3 4 #"type"
0 0 23 3 3 #") ("
0 0 14 3 5 #"error"
0 0 23 3 1 #" "
0 0 19 3 38 #"\"Cannot use Atom as Key to SubGrammar\""
0 0 23 3 3 #")] "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 5 #"null?"
0 0 23 3 1 #" "
0 0 14 3 7 #"grammar"
0 0 23 3 3 #") ("
0 0 14 3 5 #"error"
0 0 23 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 23 3 1 #" "
0 0 19 3 34 #"\"no such type exists in grammar: \""
0 0 23 3 2 #" ("
0 0 14 3 14 #"symbol->string"
0 0 23 3 1 #" "
0 0 14 3 4 #"type"
0 0 23 3 4 #")))]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 13 #"hash-has-key?"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 7 #"grammar"
0 0 23 3 2 #") "
0 0 14 3 4 #"type"
0 0 23 3 3 #") ("
0 0 14 3 8 #"hash-ref"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 7 #"grammar"
0 0 23 3 2 #") "
0 0 14 3 4 #"type"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 18 #"lookup-productions"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 7 #"grammar"
0 0 23 3 2 #") "
0 0 14 3 4 #"type"
0 0 23 3 4 #")]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 104
(
 #";utility function to simplify adding values to a data structure that"
 #" will be  used frequently throughout"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 6 #"update"
0 0 23 3 3 #"  ("
0 0 14 3 3 #"All"
0 0 23 3 2 #" ("
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 3 #") ("
0 0 14 3 9 #"HashTable"
0 0 23 3 1 #" "
0 0 14 3 1 #"A"
0 0 23 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 3 #")) "
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 14 3 2 #"->"
0 0 23 3 2 #" ("
0 0 14 3 9 #"HashTable"
0 0 23 3 1 #" "
0 0 14 3 1 #"A"
0 0 23 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 6 #"update"
0 0 23 3 1 #" "
0 0 14 3 5 #"table"
0 0 23 3 1 #" "
0 0 14 3 3 #"key"
0 0 23 3 1 #" "
0 0 14 3 5 #"value"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 13 #"hash-has-key?"
0 0 23 3 1 #" "
0 0 14 3 5 #"table"
0 0 23 3 1 #" "
0 0 14 3 3 #"key"
0 0 23 3 3 #") ("
0 0 14 3 8 #"hash-set"
0 0 23 3 1 #" "
0 0 14 3 5 #"table"
0 0 23 3 1 #" "
0 0 14 3 3 #"key"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 14 3 5 #"value"
0 0 23 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 23 3 1 #" "
0 0 14 3 5 #"table"
0 0 23 3 1 #" "
0 0 14 3 3 #"key"
0 0 23 3 4 #")))]"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 8 #"hash-set"
0 0 23 3 1 #" "
0 0 14 3 5 #"table"
0 0 23 3 1 #" "
0 0 14 3 3 #"key"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 5 #"value"
0 0 23 3 5 #"))]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 54 #";utility function to select a random element of a list"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 13 #"select-random"
0 0 23 3 2 #" ("
0 0 14 3 3 #"All"
0 0 23 3 2 #" ("
0 0 14 3 1 #"T"
0 0 23 3 4 #") (("
0 0 14 3 6 #"Listof"
0 0 23 3 1 #" "
0 0 14 3 1 #"T"
0 0 23 3 2 #") "
0 0 14 3 2 #"->"
0 0 23 3 1 #" "
0 0 14 3 1 #"T"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 13 #"select-random"
0 0 23 3 1 #" "
0 0 14 3 3 #"lst"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 8 #"list-ref"
0 0 23 3 1 #" "
0 0 14 3 3 #"lst"
0 0 23 3 2 #" ("
0 0 14 3 14 #"random-integer"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #" ("
0 0 14 3 6 #"length"
0 0 23 3 1 #" "
0 0 14 3 3 #"lst"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 8 #";utility"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 17 #"lookup-in-lexicon"
0 0 23 3 2 #" ("
0 0 14 3 7 #"Lexicon"
0 0 23 3 1 #" "
0 0 14 3 7 #"EmeType"
0 0 23 3 1 #" "
0 0 14 3 2 #"->"
0 0 23 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 23 3 1 #" "
0 0 14 3 6 #"String"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 17 #"lookup-in-lexicon"
0 0 23 3 1 #" "
0 0 14 3 7 #"lexicon"
0 0 23 3 1 #" "
0 0 14 3 4 #"type"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 8 #"hash-ref"
0 0 23 3 1 #" "
0 0 14 3 7 #"lexicon"
0 0 23 3 1 #" "
0 0 14 3 4 #"type"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 62
#";generates an arbitrary, unique symbol to use as the type name"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 11 #"new-emetype"
0 0 23 3 2 #" ("
0 0 14 3 2 #"->"
0 0 23 3 1 #" "
0 0 14 3 7 #"EmeType"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"new-emetype"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 6 #"gensym"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 7 #"EmeType"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 95
(
 #";generates a list of types, the exact number being randomly determin"
 #"ed within a specified range"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 24 #"make-random-emetype-list"
0 0 23 3 2 #" ("
0 0 14 3 7 #"Integer"
0 0 23 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 23 3 1 #" "
0 0 14 3 2 #"->"
0 0 23 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 23 3 1 #" "
0 0 14 3 7 #"EmeType"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 24 #"make-random-emetype-list"
0 0 23 3 1 #" "
0 0 14 3 5 #"lower"
0 0 23 3 1 #" "
0 0 14 3 5 #"upper"
0 0 23 3 2 #" )"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 7 #"letrec:"
0 0 23 3 3 #" (["
0 0 14 3 8 #"how-many"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 23 3 2 #" ("
0 0 14 3 14 #"random-integer"
0 0 23 3 1 #" "
0 0 14 3 5 #"lower"
0 0 23 3 1 #" "
0 0 14 3 5 #"upper"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ["
0 0 14 3 7 #"bld-lst"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 2 #" ("
0 0 14 3 7 #"Integer"
0 0 23 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 23 3 1 #" "
0 0 14 3 7 #"EmeType"
0 0 23 3 2 #") "
0 0 14 3 2 #"->"
0 0 23 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 23 3 1 #" "
0 0 14 3 7 #"EmeType"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                     ("
0 0 15 3 3 #"\316\273:"
0 0 23 3 3 #" (["
0 0 14 3 9 #"remaining"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                          ["
0 0 14 3 3 #"lst"
0 0 23 3 1 #" "
0 0 14 3 1 #":"
0 0 23 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 23 3 1 #" "
0 0 14 3 7 #"EmeType"
0 0 23 3 4 #")]) "
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 1 #"<"
0 0 23 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 3 #" ) "
0 0 14 3 3 #"lst"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 30 #"                             ["
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 7 #"bld-lst"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 11 #"new-emetype"
0 0 23 3 2 #") "
0 0 14 3 3 #"lst"
0 0 23 3 7 #"))]))])"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 7 #"bld-lst"
0 0 23 3 1 #" "
0 0 14 3 8 #"how-many"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 5 #"())))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 87
(
 #";randomly decides whether the eme to write will be one that has been"
 #" used before or not"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 18 #"lookup-in-lexicon?"
0 0 23 3 2 #" ("
0 0 14 3 7 #"Lexicon"
0 0 23 3 1 #" "
0 0 14 3 7 #"EmeType"
0 0 23 3 1 #" "
0 0 14 3 2 #"->"
0 0 23 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 18 #"lookup-in-lexicon?"
0 0 23 3 1 #" "
0 0 14 3 7 #"lexicon"
0 0 23 3 1 #" "
0 0 14 3 4 #"type"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 17 #"generate-new-eme?"
0 0 23 3 4 #")) ("
0 0 14 3 13 #"hash-has-key?"
0 0 23 3 1 #" "
0 0 14 3 7 #"lexicon"
0 0 23 3 1 #" "
0 0 14 3 4 #"type"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 1 #":"
0 0 23 3 1 #" "
0 0 14 3 17 #"generate-new-eme?"
0 0 23 3 3 #" ( "
0 0 14 3 2 #"->"
0 0 23 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 17 #"generate-new-eme?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 1 #">"
0 0 23 3 2 #" ("
0 0 14 3 6 #"random"
0 0 23 3 2 #") "
0 0 20 3 4 #".333"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0           0
